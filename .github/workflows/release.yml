name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog_content: ${{ steps.changelog.outputs.changelog_content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify version consistency
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          echo "Tag version: $TAG_VERSION"

          # Get version from Cargo.toml
          CARGO_VERSION=$(grep '^version =' src-tauri/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "Cargo.toml version: $CARGO_VERSION"

          # Get version from package.json
          PACKAGE_VERSION=$(grep '"version":' package.json | head -1 | cut -d'"' -f4)
          echo "package.json version: $PACKAGE_VERSION"

          # Get version from tauri.conf.json using jq (more reliable for JSON)
          if command -v jq >/dev/null 2>&1; then
            TAURI_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          else
            # Fallback to grep if jq not available
            TAURI_VERSION=$(grep '"version":' src-tauri/tauri.conf.json | head -1 | cut -d'"' -f4)
          fi
          echo "tauri.conf.json version: $TAURI_VERSION"

          # Check if all versions match
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "❌ ERROR: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ ERROR: Tag version ($TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

          if [ "$TAG_VERSION" != "$TAURI_VERSION" ]; then
            echo "❌ ERROR: Tag version ($TAG_VERSION) doesn't match tauri.conf.json version ($TAURI_VERSION)"
            exit 1
          fi

          echo "✅ All version numbers are consistent: $TAG_VERSION"

      - name: Generate Changelog
        id: changelog
        run: |
          # Get previous and current tags
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE=$(git rev-list --max-parents=0 HEAD)
          else
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi

          # Get merge commits with PR numbers
          MERGE_COMMITS=$(git log --oneline --merges $COMMIT_RANGE | grep -oP 'Merge pull request #\K\d+')

          # Initialize categories
          FEATURES=""
          FIXES=""
          MAINTENANCE=""
          OTHER=""

          for PR_NUM in $MERGE_COMMITS; do
            PR_INFO=$(gh pr view $PR_NUM --json title,labels --jq '[.title, (.labels | map(.name) | join(","))]' 2>/dev/null || echo "")

            if [ -n "$PR_INFO" ]; then
              IFS=$'\t' read -r TITLE LABELS <<< "$(echo "$PR_INFO" | sed 's/\[\"\(.*\)\",\"\(.*\)\"\]/\1\t\2/')"

              # Skip version bump PRs (both by label and title pattern)
              if echo "$LABELS" | grep -qi "version-bump" || \
                echo "$TITLE" | grep -qiE "chore.*bump.*version|bump.*version|version.*bump|release.*v[0-9]"; then
                echo "Skipping version bump PR: #$PR_NUM - $TITLE"
                continue
              fi

              # Determine category
              CATEGORY="other"

              # Check labels first, then title
              if echo "$LABELS" | grep -qi "feat\|feature"; then
                CATEGORY="feat"
              elif echo "$LABELS" | grep -qi "fix\|bug"; then
                CATEGORY="fix"
              elif echo "$LABELS" | grep -qi "maint\|maintenance\|chore\|docs"; then
                CATEGORY="maint"
              elif echo "$TITLE" | grep -qi "^feat:"; then
                CATEGORY="feat"
              elif echo "$TITLE" | grep -qi "^fix:"; then
                CATEGORY="fix"
              elif echo "$TITLE" | grep -qi "^maint:\|^chore:\|^docs:"; then
                CATEGORY="maint"
              fi

              # Create link to PR
              PR_LINK="([#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM}))"

              case $CATEGORY in
                "feat")
                  FEATURES="${FEATURES}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                "fix")
                  FIXES="${FIXES}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                "maint")
                  MAINTENANCE="${MAINTENANCE}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                *)
                  OTHER="${OTHER}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
              esac
            fi
          done

          CHANGELOG_CONTENT="# $CURRENT_TAG ($(date +%Y-%m-%d))"$'\n\n'

          if [ -n "$FEATURES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Features"$'\n'"$FEATURES"$'\n'
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Bug Fixes"$'\n'"$FIXES"$'\n'
          fi

          if [ -n "$MAINTENANCE" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Maintenance"$'\n'"$MAINTENANCE"$'\n'
          fi

          if [ -n "$OTHER" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Other"$'\n'"$OTHER"$'\n'
          fi

          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "${{ steps.changelog.outputs.changelog_content }}" > temp_changelog.md
            cat CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            echo "${{ steps.changelog.outputs.changelog_content }}" > CHANGELOG.md
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for ${{ github.ref_name }}" || exit 0
          git push || exit 0

  publish-tauri:
    needs: generate-changelog
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: |
            ${{ needs.generate-changelog.outputs.changelog_content }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
