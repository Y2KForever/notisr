name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog_content: ${{ steps.changelog.outputs.changelog_content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify version consistency
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          echo "Tag version: $TAG_VERSION"

          # Get version from Cargo.toml
          CARGO_VERSION=$(grep '^version =' src-tauri/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "Cargo.toml version: $CARGO_VERSION"

          # Get version from package.json
          PACKAGE_VERSION=$(grep '"version":' package.json | head -1 | cut -d'"' -f4)
          echo "package.json version: $PACKAGE_VERSION"

          # Get version from tauri.conf.json using jq (more reliable for JSON)
          if command -v jq >/dev/null 2>&1; then
            TAURI_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          else
            # Fallback to grep if jq not available
            TAURI_VERSION=$(grep '"version":' src-tauri/tauri.conf.json | head -1 | cut -d'"' -f4)
          fi
          echo "tauri.conf.json version: $TAURI_VERSION"

          # Check if this is a test/pre-release tag
          if echo "$TAG_VERSION" | grep -qiE "test|alpha|beta|rc|pre"; then
            echo "Test/Pre-release tag detected: $TAG_VERSION"
            echo "Skipping strict version consistency check for test/pre-release"

            # For test releases, just ensure the base version matches (before the test suffix)
            BASE_TAG_VERSION=$(echo "$TAG_VERSION" | sed -E 's/[-_](test|alpha|beta|rc|pre).*//i')
            echo "Base version (without test suffix): $BASE_TAG_VERSION"

            # Check if base versions match (relaxed check)
            if [ "$BASE_TAG_VERSION" != "$CARGO_VERSION" ]; then
              echo "ERROR: Base tag version ($BASE_TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
              exit 1
            fi

            if [ "$BASE_TAG_VERSION" != "$PACKAGE_VERSION" ]; then
              echo "ERROR: Base tag version ($BASE_TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
              exit 1
            fi

            if [ "$BASE_TAG_VERSION" != "$TAURI_VERSION" ]; then
              echo "ERROR: Base tag version ($BASE_TAG_VERSION) doesn't match tauri.conf.json version ($TAURI_VERSION)"
              exit 1
            fi

            echo "Base version numbers are consistent: $BASE_TAG_VERSION"

          else
            # For regular releases, do strict checking
            echo "Regular release tag detected: $TAG_VERSION"

            # Check if all versions match exactly
            if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
              echo "ERROR: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
              exit 1
            fi

            if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
              echo "ERROR: Tag version ($TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
              exit 1
            fi

            if [ "$TAG_VERSION" != "$TAURI_VERSION" ]; then
              echo "ERROR: Tag version ($TAG_VERSION) doesn't match tauri.conf.json version ($TAURI_VERSION)"
              exit 1
            fi

            echo "All version numbers are consistent: $TAG_VERSION"
          fi

      - name: Generate Changelog
        id: changelog
        run: |
          # Get previous and current tags
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE=""
          else
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi

          # Get merge commits with PR numbers
          if [ -z "$COMMIT_RANGE" ]; then
            MERGE_COMMITS=$(git log --oneline --merges | grep -oP 'Merge pull request #\K\d+' || echo "")
          else
            MERGE_COMMITS=$(git log --oneline --merges $COMMIT_RANGE | grep -oP 'Merge pull request #\K\d+' || echo "")
          fi

          # Initialize categories
          FEATURES=""
          FIXES=""
          MAINTENANCE=""
          OTHER=""

          for PR_NUM in $MERGE_COMMITS; do
            echo "Processing PR #$PR_NUM"

            # Get PR info including branch name
            PR_INFO=$(gh pr view $PR_NUM --json title,headRefName --jq '[.title, .headRefName] | @tsv' 2>/dev/null || echo "")

            if [ -n "$PR_INFO" ]; then
              IFS=$'\t' read -r TITLE BRANCH_NAME <<< "$PR_INFO"

              # Skip version bump PRs based on branch name or title
              if echo "$BRANCH_NAME" | grep -qiE "release|version|bump" || \
                echo "$TITLE" | grep -qiE "chore.*bump.*version|bump.*version|version.*bump|release.*v[0-9]"; then
                echo "Skipping version bump PR: #$PR_NUM - $TITLE (branch: $BRANCH_NAME)"
                continue
              fi

              # Determine category based on branch name prefix
              CATEGORY="other"
              BRANCH_PREFIX=$(echo "$BRANCH_NAME" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')

              case $BRANCH_PREFIX in
                "feat"|"feature")
                  CATEGORY="feat"
                  ;;
                "fix"|"bugfix")
                  CATEGORY="fix"
                  ;;
                "maint"|"chore"|"docs"|"refactor")
                  CATEGORY="maint"
                  ;;
                *)
                  # Fallback to title if branch doesn't match expected patterns
                  if echo "$TITLE" | grep -qi "^feat:"; then
                    CATEGORY="feat"
                  elif echo "$TITLE" | grep -qi "^fix:"; then
                    CATEGORY="fix"
                  elif echo "$TITLE" | grep -qi "^maint:\|^chore:\|^docs:\|^refactor:"; then
                    CATEGORY="maint"
                  fi
                  ;;
              esac

              # Create link to PR
              PR_LINK="[#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM})"

              echo "PR #$PR_NUM: '$TITLE' (branch: $BRANCH_NAME) -> category: $CATEGORY"

              case $CATEGORY in
                "feat")
                  FEATURES="${FEATURES}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                "fix")
                  FIXES="${FIXES}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                "maint")
                  MAINTENANCE="${MAINTENANCE}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
                *)
                  OTHER="${OTHER}- ${TITLE} ${PR_LINK}"$'\n'
                  ;;
              esac
            else
              echo "Could not get info for PR #$PR_NUM"
            fi
          done

          CHANGELOG_CONTENT="# $CURRENT_TAG ($(date +%Y-%m-%d))"$'\n\n'

          if [ -n "$FEATURES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Features"$'\n'"$FEATURES"$'\n'
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Bug Fixes"$'\n'"$FIXES"$'\n'
          fi

          if [ -n "$MAINTENANCE" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Maintenance"$'\n'"$MAINTENANCE"$'\n'
          fi

          if [ -n "$OTHER" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}## Other"$'\n'"$OTHER"$'\n'
          fi

          # If no PRs were found, add a default message
          if [ -z "$FEATURES" ] && [ -z "$FIXES" ] && [ -z "$MAINTENANCE" ] && [ -z "$OTHER" ]; then
            CHANGELOG_CONTENT="# $CURRENT_TAG ($(date +%Y-%m-%d))"$'\n\n'
            if [ -z "$PREVIOUS_TAG" ]; then
              CHANGELOG_CONTENT="${CHANGELOG_CONTENT}Initial release."
            else
              CHANGELOG_CONTENT="${CHANGELOG_CONTENT}No user-facing changes in this release."
            fi
          fi

          echo "Generated changelog content:"
          echo "$CHANGELOG_CONTENT"

          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update and Auto-Merge CHANGELOG.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating CHANGELOG.md..."

          # Switch to main branch and get latest
          git checkout main
          git pull origin main

          BRANCH_NAME="chore/update-changelog-${{ github.ref_name }}-$(date +%s)"
          git checkout -b $BRANCH_NAME

          # Create or update CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            echo "Prepending to existing CHANGELOG.md"
            echo "${{ steps.changelog.outputs.changelog_content }}" > temp_changelog.md
            cat CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            echo "Creating new CHANGELOG.md"
            echo "${{ steps.changelog.outputs.changelog_content }}" > CHANGELOG.md
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md

          if ! git diff-index --quiet HEAD --; then
            git commit -m "docs: Update CHANGELOG.md for ${{ github.ref_name }}"
            git push origin $BRANCH_NAME

            # Wait a moment for branch to be available
            sleep 3

            # Create PR and capture the PR number
            PR_JSON=$(gh pr create \
              --title "Update CHANGELOG.md for ${{ github.ref_name }}" \
              --body "Automated changelog update for release ${{ github.ref_name }}." \
              --base main \
              --head $BRANCH_NAME \
              --output json)

            PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
            PR_URL=$(echo "$PR_JSON" | jq -r '.url')

            echo "Pull request created: #$PR_NUMBER - $PR_URL"

            # Enable auto-merge (squash) - this will merge when requirements are met
            gh pr merge $PR_NUMBER --squash --auto --delete-branch

            echo "Auto-merge enabled for PR #$PR_NUMBER"

            # If you want immediate merge (bypassing any requirements):
            # gh pr merge $PR_NUMBER --squash --delete-branch --admin
          else
            echo "No changes to CHANGELOG.md"
            git checkout main
            git branch -D $BRANCH_NAME
          fi

  publish-tauri:
    needs: generate-changelog
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Create .env file for Unix
        if: runner.os != 'Windows'
        run: |
          cat > .env << EOF
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          SCOPE=${{ secrets.SCOPE }}
          APPSYNC_HTTP_URI=${{ secrets.APPSYNC_HTTP_URI }}
          APPSYNC_REALTIME_URI=${{ secrets.APPSYNC_REALTIME_URI }}
          BASE_URI=${{ secrets.BASE_URI }}
          EOF

      - name: Create .env file for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          @"
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          SCOPE=${{ secrets.SCOPE }}
          APPSYNC_HTTP_URI=${{ secrets.APPSYNC_HTTP_URI }}
          APPSYNC_REALTIME_URI=${{ secrets.APPSYNC_REALTIME_URI }}
          BASE_URI=${{ secrets.BASE_URI }}
          "@ | Out-File -FilePath .env -Encoding utf8

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'Notisr v__VERSION__'
          releaseBody: |
            ${{ needs.generate-changelog.outputs.changelog_content }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Cleanup .env file
        shell: bash
        run: |
          if [ -f .env ]; then
            rm -f .env
            echo ".env file removed"
          fi
